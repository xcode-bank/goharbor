import { waitForAsync, ComponentFixture, TestBed } from '@angular/core/testing';
import { ResultBarChartComponent } from './result-bar-chart.component';
import { ResultTipComponent } from './result-tip.component';
import { ResultTipHistogramComponent } from "./result-tip-histogram/result-tip-histogram.component";
import { HistogramChartComponent } from "./histogram-chart/histogram-chart.component";
import { IServiceConfig, SERVICE_CONFIG } from "../../../../lib/entities/service.config";
import {
  JobLogDefaultService,
  JobLogService,
  ScanningResultDefaultService,
  ScanningResultService,
} from "../../../../lib/services";
import { CURRENT_BASE_HREF, VULNERABILITY_SCAN_STATUS } from "../../../../lib/utils/utils";
import { SharedModule } from "../../../../lib/utils/shared/shared.module";
import { ErrorHandler } from "../../../../lib/utils/error-handler";
import { ChannelService } from "../../../../lib/services/channel.service";
import { ArtifactDefaultService, ArtifactService } from "../artifact/artifact.service";
import { NativeReportSummary } from "../../../../../ng-swagger-gen/models/native-report-summary";

describe('ResultBarChartComponent (inline template)', () => {
  let component: ResultBarChartComponent;
  let fixture: ComponentFixture<ResultBarChartComponent>;
  let serviceConfig: IServiceConfig;
  let testConfig: IServiceConfig = {
    vulnerabilityScanningBaseEndpoint: CURRENT_BASE_HREF + "/vulnerability/testing"
  };
  let mockData: NativeReportSummary = {
    scan_status: VULNERABILITY_SCAN_STATUS.SUCCESS,
    severity: "High",
    end_time: new Date().toUTCString(),
    summary: {
      total: 124,
      fixable: 50,
      summary: {
        "High": 5,
        "Low": 5
      }
    }
  };

  beforeEach(waitForAsync(() => {
    TestBed.configureTestingModule({
      imports: [
        SharedModule
      ],
      declarations: [
        ResultBarChartComponent,
        ResultTipComponent,
        ResultTipHistogramComponent,
        HistogramChartComponent],
      providers: [
        ErrorHandler,
        ChannelService,
        ArtifactDefaultService,
        { provide: SERVICE_CONFIG, useValue: testConfig },
        { provide: ArtifactService, useValue: ArtifactDefaultService },
        { provide: ScanningResultService, useValue: ScanningResultDefaultService },
        { provide: JobLogService, useValue: JobLogDefaultService}
      ]
    }).compileComponents();

  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(ResultBarChartComponent);
    component = fixture.componentInstance;
    component.artifactDigest = "mockTag";
    component.summary = mockData;

    serviceConfig = TestBed.get(SERVICE_CONFIG);

    fixture.detectChanges();
  });

  it('should be created', () => {
    expect(component).toBeTruthy();
    expect(serviceConfig).toBeTruthy();
    expect(serviceConfig.vulnerabilityScanningBaseEndpoint).toEqual(CURRENT_BASE_HREF + "/vulnerability/testing");
  });

  it('should show "not scanned" if status is STOPPED', () => {
    component.summary.scan_status = VULNERABILITY_SCAN_STATUS.STOPPED;
    fixture.detectChanges();
    fixture.whenStable().then(() => {
      fixture.detectChanges();
      let el: HTMLElement = fixture.nativeElement.querySelector('span');
      expect(el).toBeTruthy();
      expect(el.textContent).toEqual('VULNERABILITY.STATE.OTHER_STATUS');
    });
  });

  it('should show progress if status is SCANNING', () => {
    component.summary.scan_status = VULNERABILITY_SCAN_STATUS.RUNNING;
    fixture.detectChanges();

    fixture.whenStable().then(() => {
      fixture.detectChanges();

      let el: HTMLElement = fixture.nativeElement.querySelector('.progress');
      expect(el).toBeTruthy();
    });
  });

  it('should show QUEUED if status is QUEUED', () => {
    component.summary.scan_status = VULNERABILITY_SCAN_STATUS.PENDING;
    fixture.detectChanges();
    fixture.whenStable().then(() => {
      fixture.detectChanges();

      let el: HTMLElement = fixture.nativeElement.querySelector('.bar-state');
      expect(el).toBeTruthy();
      let el2: HTMLElement = el.querySelector('span');
      expect(el2).toBeTruthy();
      expect(el2.textContent).toEqual('VULNERABILITY.STATE.QUEUED');

    });
  });

  it('should show summary bar chart if status is COMPLETED', () => {
    component.summary.scan_status = VULNERABILITY_SCAN_STATUS.SUCCESS;
    fixture.detectChanges();

    fixture.whenStable().then(() => {
      fixture.detectChanges();
      let el: HTMLElement = fixture.nativeElement.querySelector('hbr-result-tip-histogram');
      expect(el).not.toBeNull();
    });
  });

});
