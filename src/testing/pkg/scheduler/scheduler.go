// Code generated by mockery v2.1.0. DO NOT EDIT.

package scheduler

import (
	context "context"

	scheduler "github.com/goharbor/harbor/src/pkg/scheduler"
	mock "github.com/stretchr/testify/mock"
)

// Scheduler is an autogenerated mock type for the Scheduler type
type Scheduler struct {
	mock.Mock
}

// GetSchedule provides a mock function with given fields: ctx, id
func (_m *Scheduler) GetSchedule(ctx context.Context, id int64) (*scheduler.Schedule, error) {
	ret := _m.Called(ctx, id)

	var r0 *scheduler.Schedule
	if rf, ok := ret.Get(0).(func(context.Context, int64) *scheduler.Schedule); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*scheduler.Schedule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Schedule provides a mock function with given fields: ctx, cron, callbackFuncName, params
func (_m *Scheduler) Schedule(ctx context.Context, cron string, callbackFuncName string, params interface{}) (int64, error) {
	ret := _m.Called(ctx, cron, callbackFuncName, params)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}) int64); ok {
		r0 = rf(ctx, cron, callbackFuncName, params)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, interface{}) error); ok {
		r1 = rf(ctx, cron, callbackFuncName, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnSchedule provides a mock function with given fields: ctx, id
func (_m *Scheduler) UnSchedule(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
