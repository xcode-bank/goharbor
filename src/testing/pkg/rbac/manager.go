// Code generated by mockery v2.1.0. DO NOT EDIT.

package rbac

import (
	context "context"

	model "github.com/goharbor/harbor/src/pkg/rbac/model"
	mock "github.com/stretchr/testify/mock"

	q "github.com/goharbor/harbor/src/lib/q"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// CreatePermission provides a mock function with given fields: ctx, rp
func (_m *Manager) CreatePermission(ctx context.Context, rp *model.RolePermission) (int64, error) {
	ret := _m.Called(ctx, rp)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *model.RolePermission) int64); ok {
		r0 = rf(ctx, rp)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.RolePermission) error); ok {
		r1 = rf(ctx, rp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRbacPolicy provides a mock function with given fields: ctx, rp
func (_m *Manager) CreateRbacPolicy(ctx context.Context, rp *model.RbacPolicy) (int64, error) {
	ret := _m.Called(ctx, rp)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *model.RbacPolicy) int64); ok {
		r0 = rf(ctx, rp)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.RbacPolicy) error); ok {
		r1 = rf(ctx, rp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePermission provides a mock function with given fields: ctx, id
func (_m *Manager) DeletePermission(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePermissionByRole provides a mock function with given fields: ctx, roleType, roleID
func (_m *Manager) DeletePermissionByRole(ctx context.Context, roleType string, roleID int64) error {
	ret := _m.Called(ctx, roleType, roleID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) error); ok {
		r0 = rf(ctx, roleType, roleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRbacPolicy provides a mock function with given fields: ctx, id
func (_m *Manager) DeleteRbacPolicy(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPermissionsByRole provides a mock function with given fields: ctx, roleType, roleID
func (_m *Manager) GetPermissionsByRole(ctx context.Context, roleType string, roleID int64) ([]*model.RolePermissions, error) {
	ret := _m.Called(ctx, roleType, roleID)

	var r0 []*model.RolePermissions
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) []*model.RolePermissions); ok {
		r0 = rf(ctx, roleType, roleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.RolePermissions)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = rf(ctx, roleType, roleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPermission provides a mock function with given fields: ctx, query
func (_m *Manager) ListPermission(ctx context.Context, query *q.Query) ([]*model.RolePermission, error) {
	ret := _m.Called(ctx, query)

	var r0 []*model.RolePermission
	if rf, ok := ret.Get(0).(func(context.Context, *q.Query) []*model.RolePermission); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.RolePermission)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *q.Query) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRbacPolicy provides a mock function with given fields: ctx, query
func (_m *Manager) ListRbacPolicy(ctx context.Context, query *q.Query) ([]*model.RbacPolicy, error) {
	ret := _m.Called(ctx, query)

	var r0 []*model.RbacPolicy
	if rf, ok := ret.Get(0).(func(context.Context, *q.Query) []*model.RbacPolicy); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.RbacPolicy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *q.Query) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
