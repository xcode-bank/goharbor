// Code generated by mockery v2.1.0. DO NOT EDIT.

package allowlist

import (
	models "github.com/goharbor/harbor/src/common/models"
	mock "github.com/stretchr/testify/mock"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// CreateEmpty provides a mock function with given fields: projectID
func (_m *Manager) CreateEmpty(projectID int64) error {
	ret := _m.Called(projectID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(projectID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: projectID
func (_m *Manager) Get(projectID int64) (*models.CVEAllowlist, error) {
	ret := _m.Called(projectID)

	var r0 *models.CVEAllowlist
	if rf, ok := ret.Get(0).(func(int64) *models.CVEAllowlist); ok {
		r0 = rf(projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CVEAllowlist)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSys provides a mock function with given fields:
func (_m *Manager) GetSys() (*models.CVEAllowlist, error) {
	ret := _m.Called()

	var r0 *models.CVEAllowlist
	if rf, ok := ret.Get(0).(func() *models.CVEAllowlist); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CVEAllowlist)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: projectID, list
func (_m *Manager) Set(projectID int64, list models.CVEAllowlist) error {
	ret := _m.Called(projectID, list)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, models.CVEAllowlist) error); ok {
		r0 = rf(projectID, list)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetSys provides a mock function with given fields: list
func (_m *Manager) SetSys(list models.CVEAllowlist) error {
	ret := _m.Called(list)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.CVEAllowlist) error); ok {
		r0 = rf(list)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
