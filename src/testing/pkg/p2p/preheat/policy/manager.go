// Code generated by mockery v2.0.3. DO NOT EDIT.

package policy

import (
	context "context"

	policy "github.com/goharbor/harbor/src/pkg/p2p/preheat/models/policy"
	mock "github.com/stretchr/testify/mock"

	q "github.com/goharbor/harbor/src/lib/q"
)

// FakeManager is an autogenerated mock type for the Manager type
type FakeManager struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, schema
func (_m *FakeManager) Create(ctx context.Context, schema *policy.Schema) (int64, error) {
	ret := _m.Called(ctx, schema)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *policy.Schema) int64); ok {
		r0 = rf(ctx, schema)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *policy.Schema) error); ok {
		r1 = rf(ctx, schema)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *FakeManager) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *FakeManager) Get(ctx context.Context, id int64) (*policy.Schema, error) {
	ret := _m.Called(ctx, id)

	var r0 *policy.Schema
	if rf, ok := ret.Get(0).(func(context.Context, int64) *policy.Schema); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*policy.Schema)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPolicies provides a mock function with given fields: ctx, query
func (_m *FakeManager) ListPolicies(ctx context.Context, query *q.Query) (int64, []*policy.Schema, error) {
	ret := _m.Called(ctx, query)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *q.Query) int64); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 []*policy.Schema
	if rf, ok := ret.Get(1).(func(context.Context, *q.Query) []*policy.Schema); ok {
		r1 = rf(ctx, query)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*policy.Schema)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *q.Query) error); ok {
		r2 = rf(ctx, query)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListPoliciesByProject provides a mock function with given fields: ctx, project, query
func (_m *FakeManager) ListPoliciesByProject(ctx context.Context, project int64, query *q.Query) (int64, []*policy.Schema, error) {
	ret := _m.Called(ctx, project, query)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, int64, *q.Query) int64); ok {
		r0 = rf(ctx, project, query)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 []*policy.Schema
	if rf, ok := ret.Get(1).(func(context.Context, int64, *q.Query) []*policy.Schema); ok {
		r1 = rf(ctx, project, query)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*policy.Schema)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int64, *q.Query) error); ok {
		r2 = rf(ctx, project, query)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: ctx, schema, props
func (_m *FakeManager) Update(ctx context.Context, schema *policy.Schema, props ...string) error {
	_va := make([]interface{}, len(props))
	for _i := range props {
		_va[_i] = props[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, schema)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *policy.Schema, ...string) error); ok {
		r0 = rf(ctx, schema, props...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
