import { async, ComponentFixture, TestBed, fakeAsync, tick } from '@angular/core/testing';
import { By } from '@angular/platform-browser';
import { HttpModule } from '@angular/http';
import { DebugElement } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { VulnerabilitySummary } from '../service/index';

import { ResultBarChartComponent, ScanState } from './result-bar-chart.component';
import { ResultTipComponent } from './result-tip.component';
import { ScanningResultService, ScanningResultDefaultService } from '../service/scanning.service';
import { SERVICE_CONFIG, IServiceConfig } from '../service.config';
import { ErrorHandler } from '../error-handler/index';
import { SharedModule } from '../shared/shared.module';

describe('ResultBarChartComponent (inline template)', () => {
  let component: ResultBarChartComponent;
  let fixture: ComponentFixture<ResultBarChartComponent>;
  let serviceConfig: IServiceConfig;
  let testConfig: IServiceConfig = {
    vulnerabilityScanningBaseEndpoint: "/api/vulnerability/testing"
  };
  let mockData: VulnerabilitySummary = {
    total_package: 124,
    package_with_none: 92,
    package_with_high: 10,
    package_with_medium: 6,
    package_With_low: 13,
    package_with_unknown: 3,
    complete_timestamp: new Date()
  };

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      imports: [
        SharedModule
      ],
      declarations: [
        ResultBarChartComponent,
        ResultTipComponent],
      providers: [
        ErrorHandler,
        { provide: SERVICE_CONFIG, useValue: testConfig }
      ]
    });

  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(ResultBarChartComponent);
    component = fixture.componentInstance;
    component.tagId = "mockTag";
    component.state = ScanState.UNKNOWN;

    serviceConfig = TestBed.get(SERVICE_CONFIG);

    fixture.detectChanges();
  });

  it('should be created', () => {
    expect(component).toBeTruthy();
  });

  it('should inject the SERVICE_CONFIG', () => {
    expect(serviceConfig).toBeTruthy();
    expect(serviceConfig.vulnerabilityScanningBaseEndpoint).toEqual("/api/vulnerability/testing");
  });

  it('should show a button if status is PENDING', async(() => {
    component.state = ScanState.PENDING;
    fixture.detectChanges();

    fixture.whenStable().then(() => { // wait for async getRecentLogs
      fixture.detectChanges();

      let el: HTMLElement = fixture.nativeElement.querySelector('.scanning-button');
      expect(el).toBeTruthy();
    });
  }));

  it('should show progress if status is SCANNING', async(() => {
    component.state = ScanState.SCANNING;
    fixture.detectChanges();

    fixture.whenStable().then(() => { // wait for async getRecentLogs
      fixture.detectChanges();

      let el: HTMLElement = fixture.nativeElement.querySelector('.progress');
      expect(el).toBeTruthy();
    });
  }));

  it('should show QUEUED if status is QUEUED', async(() => {
    component.state = ScanState.QUEUED;
    fixture.detectChanges();

    fixture.whenStable().then(() => { // wait for async getRecentLogs
      fixture.detectChanges();

      let el: HTMLElement = fixture.nativeElement.querySelector('.bar-state');
      expect(el).toBeTruthy();
      let el2: HTMLElement = el.querySelector('span');
      expect(el2).toBeTruthy();
      expect(el2.textContent).toEqual('VULNERABILITY.STATE.QUEUED');

    });
  }));

  it('should show summary bar chart if status is COMPLETED', async(() => {
    component.state = ScanState.COMPLETED;
    component.summary = mockData;
    fixture.detectChanges();

    fixture.whenStable().then(() => { // wait for async getRecentLogs
      fixture.detectChanges();

      let el: HTMLElement = fixture.nativeElement.querySelector('.bar-block-none');
      expect(el).not.toBeNull();
      expect(el.style.width).toEqual("74px");
    });
  }));

});
