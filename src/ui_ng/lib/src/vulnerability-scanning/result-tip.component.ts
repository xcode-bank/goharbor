import { Component, Input, OnInit } from '@angular/core';
import { VulnerabilitySummary, VulnerabilitySeverity } from '../service/index';
import { TranslateService } from '@ngx-translate/core';

import { SCANNING_STYLES } from './scanning.css';
import { TIP_COMPONENT_HTML } from './scanning.html';

export const MIN_TIP_WIDTH = 5;
export const MAX_TIP_WIDTH = 100;

@Component({
    selector: 'hbr-vulnerability-summary-chart',
    template: TIP_COMPONENT_HTML,
    styles: [SCANNING_STYLES]
})
export class ResultTipComponent implements OnInit {
    _tipTitle: string = "";

    @Input() summary: VulnerabilitySummary = {
        total_package: 0,
        package_with_none: 0,
        complete_timestamp: new Date()
    };

    constructor(private translate: TranslateService) { }

    ngOnInit(): void {
        this.translate.get('VULNERABILITY.CHART.TOOLTIPS_TITLE',
            { totalVulnerability: this.totalVulnerabilities, totalPackages: this.summary.total_package })
            .subscribe((res: string) => this._tipTitle = res);
    }

    tipWidth(severity: VulnerabilitySeverity): string {
        let n: number = 0;
        let m: number = this.summary ? this.summary.total_package : 0;

        if (m === 0) {
            return 0 + 'px';
        }

        switch (severity) {
            case VulnerabilitySeverity.HIGH:
                n = this.highCount;
                break;
            case VulnerabilitySeverity.MEDIUM:
                n = this.mediumCount;
                break;
            case VulnerabilitySeverity.LOW:
                n = this.lowCount;
                break;
            case VulnerabilitySeverity.UNKNOWN:
                n = this.unknownCount;
                break;
            case VulnerabilitySeverity.NONE:
                n = this.noneCount;
                break;
            default:
                n = 0;
                break;
        }

        let width: number = Math.round((n/m)*MAX_TIP_WIDTH);
        if(width < MIN_TIP_WIDTH){
            width = MIN_TIP_WIDTH;
        }

        return width + 'px';
    }


    unitText(count: number): string {
        if (count > 1) {
            return "VULNERABILITY.PLURAL";
        }

        return "VULNERABILITY.SINGULAR";
    }

    public get totalVulnerabilities(): number {
        return this.summary.total_package - this.summary.package_with_none;
    }

    public get hasHigh(): boolean {
        return this.highCount > 0;
    }

    public get hasMedium(): boolean {
        return this.mediumCount > 0;
    }

    public get hasLow(): boolean {
        return this.lowCount > 0;
    }

    public get hasUnknown(): boolean {
        return this.unknownCount > 0;
    }

    public get hasNone(): boolean {
        return this.noneCount > 0;
    }

    public get tipTitle(): string {
        return this._tipTitle;
    }

    public get highCount(): number {
        return this.summary && this.summary.package_with_high ? this.summary.package_with_high : 0;
    }

    public get mediumCount(): number {
        return this.summary && this.summary.package_with_medium ? this.summary.package_with_medium : 0;
    }

    public get lowCount(): number {
        return this.summary && this.summary.package_With_low ? this.summary.package_With_low : 0;
    }

    public get unknownCount(): number {
        return this.summary && this.summary.package_with_unknown ? this.summary.package_with_unknown : 0;
    }
    public get noneCount(): number {
        return this.summary && this.summary.package_with_none ? this.summary.package_with_none : 0;
    }

    public get highSuffix(): string {
        return this.unitText(this.highCount);
    }

    public get mediumSuffix(): string {
        return this.unitText(this.mediumCount);
    }

    public get lowSuffix(): string {
        return this.unitText(this.lowCount);
    }

    public get unknownSuffix(): string {
        return this.unitText(this.unknownCount);
    }

    public get noneSuffix(): string {
        return this.unitText(this.noneCount);
    }

    public get maxWidth(): string {
        return MAX_TIP_WIDTH+"px";
    }
}
