import {
    Component,
    Input,
    Output,
    EventEmitter,
    OnInit
} from '@angular/core';
import { VulnerabilitySummary } from '../service/index';
import { SCANNING_STYLES } from './scanning.css';
import { BAR_CHART_COMPONENT_HTML } from './scanning.html';
import { VULNERABILITY_SCAN_STATUS } from '../utils';
import { VulnerabilitySeverity } from '../service/index';

export enum ScanState {
    COMPLETED, //Scanning work successfully completed
    ERROR,  //Error occurred when scanning
    QUEUED, //Scanning job is queued
    SCANNING, //Scanning in progress
    PENDING, //Scanning not start
    UNKNOWN //Unknown status
}

@Component({
    selector: 'hbr-vulnerability-bar',
    styles: [SCANNING_STYLES],
    template: BAR_CHART_COMPONENT_HTML
})
export class ResultBarChartComponent implements OnInit {
    @Input() tagId: string = "";
    @Input() state: ScanState = ScanState.PENDING;
    @Input() summary: VulnerabilitySummary = {
        scan_status: VULNERABILITY_SCAN_STATUS.unknown,
        severity: VulnerabilitySeverity.UNKNOWN,
        update_time: new Date(),
        components: {
            total: 0,
            summary: []
        }
    };
    @Output() startScanning: EventEmitter<string> = new EventEmitter<string>();
    scanningInProgress: boolean = false;

    constructor() { }

    ngOnInit(): void {
        if (this.summary && this.summary.scan_status) {
            switch (this.summary.scan_status) {
                case VULNERABILITY_SCAN_STATUS.unknown:
                    this.state = ScanState.UNKNOWN;
                    break;
                case VULNERABILITY_SCAN_STATUS.error:
                    this.state = ScanState.ERROR;
                    break;
                case VULNERABILITY_SCAN_STATUS.pending:
                    this.state = ScanState.QUEUED;
                    break;
                case VULNERABILITY_SCAN_STATUS.stopped:
                    this.state = ScanState.PENDING;
                    break;
                case VULNERABILITY_SCAN_STATUS.finished:
                    this.state = ScanState.COMPLETED;
                    break;
                default:
                    break;
            }
        }
    }

    public get completed(): boolean {
        return this.state === ScanState.COMPLETED;
    }

    public get error(): boolean {
        return this.state === ScanState.ERROR;
    }

    public get queued(): boolean {
        return this.state === ScanState.QUEUED;
    }

    public get scanning(): boolean {
        return this.state === ScanState.SCANNING;
    }

    public get pending(): boolean {
        return this.state === ScanState.PENDING;
    }

    public get unknown(): boolean {
        return this.state === ScanState.UNKNOWN;
    }

    scanNow(): void {
        if (this.tagId && this.tagId !== '') {
            this.scanningInProgress = true;
            this.startScanning.emit(this.tagId);
        }
    }
}
